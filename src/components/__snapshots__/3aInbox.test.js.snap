// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[` 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <MessageComponent
    checkItem={[Function]}
    message={
        Object {
            "id": 1,
            "labels": Array [
              "dev",
              "personal",
            ],
            "read": true,
            "starred": true,
            "subject": "You can't input the protocol without calculating the mobile RSS protocol!",
          }
    }
    onDeselectMessage={[Function]}
    onMarkAsReadMessage={[Function]}
    onSelectMessage={[Function]}
    onStarMessage={[Function]}
    onUnstarMessage={[Function]}
    selected={true}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": null,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="col-xs-1"
>
          <div
                    className="row"
          >
                    <div
                              className="col-xs-2"
                    >
                              <input
                                        checked="checked"
                                        className="checkBox"
                                        name="checkbox"
                                        onChange={[Function]}
                                        type="checkbox"
                              />
                    </div>
                    <div
                              className="col-xs-2"
                    >
                              <i
                                        className="star fa fa-star "
                                        onClick={[Function]}
                              />
                    </div>
          </div>
</div>,
        <div
          className="col-xs-11"
>
          <span
                    className="label label-warning"
          >
                    dev
          </span>
          <span
                    className="label label-warning"
          >
                    personal
          </span>
          <a
                    className="msg"
                    href="."
                    onClick={[Function]}
          >
                    You can't input the protocol without calculating the mobile RSS protocol!
          </a>
</div>,
      ],
      "className": "row message read selected MessageComponent",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": null,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="row"
>
            <div
                        className="col-xs-2"
            >
                        <input
                                    checked="checked"
                                    className="checkBox"
                                    name="checkbox"
                                    onChange={[Function]}
                                    type="checkbox"
                        />
            </div>
            <div
                        className="col-xs-2"
            >
                        <i
                                    className="star fa fa-star "
                                    onClick={[Function]}
                        />
            </div>
</div>,
          "className": "col-xs-1",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": null,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="col-xs-2"
>
                <input
                                checked="checked"
                                className="checkBox"
                                name="checkbox"
                                onChange={[Function]}
                                type="checkbox"
                />
</div>,
              <div
                className="col-xs-2"
>
                <i
                                className="star fa fa-star "
                                onClick={[Function]}
                />
</div>,
            ],
            "className": "row",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": null,
              "nodeType": "host",
              "props": Object {
                "children": <input
                  checked="checked"
                  className="checkBox"
                  name="checkbox"
                  onChange={[Function]}
                  type="checkbox"
/>,
                "className": "col-xs-2",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": null,
                "nodeType": "host",
                "props": Object {
                  "checked": "checked",
                  "className": "checkBox",
                  "name": "checkbox",
                  "onChange": [Function],
                  "type": "checkbox",
                },
                "ref": null,
                "rendered": null,
                "type": "input",
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": null,
              "nodeType": "host",
              "props": Object {
                "children": <i
                  className="star fa fa-star "
                  onClick={[Function]}
/>,
                "className": "col-xs-2",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": null,
                "nodeType": "host",
                "props": Object {
                  "className": "star fa fa-star ",
                  "onClick": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": "i",
              },
              "type": "div",
            },
          ],
          "type": "div",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": null,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            Array [
              <span
                className="label label-warning"
>
                dev
</span>,
              <span
                className="label label-warning"
>
                personal
</span>,
            ],
            <a
              className="msg"
              href="."
              onClick={[Function]}
>
              You can't input the protocol without calculating the mobile RSS protocol!
</a>,
          ],
          "className": "col-xs-11",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": "0",
            "nodeType": "host",
            "props": Object {
              "children": "dev",
              "className": "label label-warning",
            },
            "ref": null,
            "rendered": "dev",
            "type": "span",
          },
          Object {
            "instance": null,
            "key": "1",
            "nodeType": "host",
            "props": Object {
              "children": "personal",
              "className": "label label-warning",
            },
            "ref": null,
            "rendered": "personal",
            "type": "span",
          },
          Object {
            "instance": null,
            "key": null,
            "nodeType": "host",
            "props": Object {
              "children": "You can't input the protocol without calculating the mobile RSS protocol!",
              "className": "msg",
              "href": ".",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": "You can't input the protocol without calculating the mobile RSS protocol!",
            "type": "a",
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": null,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="col-xs-1"
>
            <div
                        className="row"
            >
                        <div
                                    className="col-xs-2"
                        >
                                    <input
                                                checked="checked"
                                                className="checkBox"
                                                name="checkbox"
                                                onChange={[Function]}
                                                type="checkbox"
                                    />
                        </div>
                        <div
                                    className="col-xs-2"
                        >
                                    <i
                                                className="star fa fa-star "
                                                onClick={[Function]}
                                    />
                        </div>
            </div>
</div>,
          <div
            className="col-xs-11"
>
            <span
                        className="label label-warning"
            >
                        dev
            </span>
            <span
                        className="label label-warning"
            >
                        personal
            </span>
            <a
                        className="msg"
                        href="."
                        onClick={[Function]}
            >
                        You can't input the protocol without calculating the mobile RSS protocol!
            </a>
</div>,
        ],
        "className": "row message read selected MessageComponent",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": null,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="row"
>
              <div
                            className="col-xs-2"
              >
                            <input
                                          checked="checked"
                                          className="checkBox"
                                          name="checkbox"
                                          onChange={[Function]}
                                          type="checkbox"
                            />
              </div>
              <div
                            className="col-xs-2"
              >
                            <i
                                          className="star fa fa-star "
                                          onClick={[Function]}
                            />
              </div>
</div>,
            "className": "col-xs-1",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": null,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div
                  className="col-xs-2"
>
                  <input
                                    checked="checked"
                                    className="checkBox"
                                    name="checkbox"
                                    onChange={[Function]}
                                    type="checkbox"
                  />
</div>,
                <div
                  className="col-xs-2"
>
                  <i
                                    className="star fa fa-star "
                                    onClick={[Function]}
                  />
</div>,
              ],
              "className": "row",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": null,
                "nodeType": "host",
                "props": Object {
                  "children": <input
                    checked="checked"
                    className="checkBox"
                    name="checkbox"
                    onChange={[Function]}
                    type="checkbox"
/>,
                  "className": "col-xs-2",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": null,
                  "nodeType": "host",
                  "props": Object {
                    "checked": "checked",
                    "className": "checkBox",
                    "name": "checkbox",
                    "onChange": [Function],
                    "type": "checkbox",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
                "type": "div",
              },
              Object {
                "instance": null,
                "key": null,
                "nodeType": "host",
                "props": Object {
                  "children": <i
                    className="star fa fa-star "
                    onClick={[Function]}
/>,
                  "className": "col-xs-2",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": null,
                  "nodeType": "host",
                  "props": Object {
                    "className": "star fa fa-star ",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "i",
                },
                "type": "div",
              },
            ],
            "type": "div",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": null,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              Array [
                <span
                  className="label label-warning"
>
                  dev
</span>,
                <span
                  className="label label-warning"
>
                  personal
</span>,
              ],
              <a
                className="msg"
                href="."
                onClick={[Function]}
>
                You can't input the protocol without calculating the mobile RSS protocol!
</a>,
            ],
            "className": "col-xs-11",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": "0",
              "nodeType": "host",
              "props": Object {
                "children": "dev",
                "className": "label label-warning",
              },
              "ref": null,
              "rendered": "dev",
              "type": "span",
            },
            Object {
              "instance": null,
              "key": "1",
              "nodeType": "host",
              "props": Object {
                "children": "personal",
                "className": "label label-warning",
              },
              "ref": null,
              "rendered": "personal",
              "type": "span",
            },
            Object {
              "instance": null,
              "key": null,
              "nodeType": "host",
              "props": Object {
                "children": "You can't input the protocol without calculating the mobile RSS protocol!",
                "className": "msg",
                "href": ".",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": "You can't input the protocol without calculating the mobile RSS protocol!",
              "type": "a",
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactFifteenAdapter {
      "options": Object {
        "supportPrevContextArgumentOfComponentDidUpdate": true,
      },
    },
  },
}
`;

exports[` 2`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <MessagesComponent
    checkItem={[Function]}
    messages={
        Array [
            Object {
              "id": 1,
              "labels": Array [
                "dev",
                "personal",
              ],
              "read": false,
              "starred": false,
              "subject": "You can't input the protocol without calculating the mobile RSS protocol!",
            },
            Object {
              "id": 2,
              "labels": Array [],
              "read": false,
              "starred": false,
              "subject": "connecting the system won't do anything, we need to input the mobile AI panel!",
            },
            Object {
              "id": 3,
              "labels": Array [
                "dev",
              ],
              "read": false,
              "starred": true,
              "subject": "Use the 1080p HTTP feed, then you can parse the cross-platform hard drive!",
            },
            Object {
              "id": 4,
              "labels": Array [],
              "read": false,
              "selected": true,
              "starred": false,
              "subject": "We need to program the primary TCP hard drive!",
            },
            Object {
              "id": 5,
              "labels": Array [
                "personal",
              ],
              "read": false,
              "starred": false,
              "subject": "If we override the interface, we can get to the HTTP feed through the virtual EXE interface!",
            },
            Object {
              "id": 6,
              "labels": Array [],
              "read": false,
              "starred": true,
              "subject": "We need to back up the wireless GB driver!",
            },
            Object {
              "id": 7,
              "labels": Array [
                "dev",
                "personal",
              ],
              "read": false,
              "starred": false,
              "subject": "We need to index the mobile PCI bus!",
            },
            Object {
              "id": 8,
              "labels": Array [],
              "read": false,
              "starred": true,
              "subject": "If we connect the sensor, we can get to the HDD port through the redundant IB firewall!",
            },
          ]
    }
    onDeselectMessage={[Function]}
    onMarkAsReadMessage={[Function]}
    onSelectMessage={[Function]}
    onStarMessage={[Function]}
    onUnstarMessage={[Function]}
    selectedMessageIds={
        Array [
            1,
          ]
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": null,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <MessageComponent
          checkItem={[Function]}
          message={
                    Object {
                              "id": 1,
                              "labels": Array [
                                "dev",
                                "personal",
                              ],
                              "read": false,
                              "starred": false,
                              "subject": "You can't input the protocol without calculating the mobile RSS protocol!",
                            }
          }
          onDeselectMessage={[Function]}
          onMarkAsReadMessage={[Function]}
          onSelectMessage={[Function]}
          onStarMessage={[Function]}
          onUnstarMessage={[Function]}
          selected={true}
/>,
        <MessageComponent
          checkItem={[Function]}
          message={
                    Object {
                              "id": 2,
                              "labels": Array [],
                              "read": false,
                              "starred": false,
                              "subject": "connecting the system won't do anything, we need to input the mobile AI panel!",
                            }
          }
          onDeselectMessage={[Function]}
          onMarkAsReadMessage={[Function]}
          onSelectMessage={[Function]}
          onStarMessage={[Function]}
          onUnstarMessage={[Function]}
          selected={false}
/>,
        <MessageComponent
          checkItem={[Function]}
          message={
                    Object {
                              "id": 3,
                              "labels": Array [
                                "dev",
                              ],
                              "read": false,
                              "starred": true,
                              "subject": "Use the 1080p HTTP feed, then you can parse the cross-platform hard drive!",
                            }
          }
          onDeselectMessage={[Function]}
          onMarkAsReadMessage={[Function]}
          onSelectMessage={[Function]}
          onStarMessage={[Function]}
          onUnstarMessage={[Function]}
          selected={false}
/>,
        <MessageComponent
          checkItem={[Function]}
          message={
                    Object {
                              "id": 4,
                              "labels": Array [],
                              "read": false,
                              "selected": true,
                              "starred": false,
                              "subject": "We need to program the primary TCP hard drive!",
                            }
          }
          onDeselectMessage={[Function]}
          onMarkAsReadMessage={[Function]}
          onSelectMessage={[Function]}
          onStarMessage={[Function]}
          onUnstarMessage={[Function]}
          selected={false}
/>,
        <MessageComponent
          checkItem={[Function]}
          message={
                    Object {
                              "id": 5,
                              "labels": Array [
                                "personal",
                              ],
                              "read": false,
                              "starred": false,
                              "subject": "If we override the interface, we can get to the HTTP feed through the virtual EXE interface!",
                            }
          }
          onDeselectMessage={[Function]}
          onMarkAsReadMessage={[Function]}
          onSelectMessage={[Function]}
          onStarMessage={[Function]}
          onUnstarMessage={[Function]}
          selected={false}
/>,
        <MessageComponent
          checkItem={[Function]}
          message={
                    Object {
                              "id": 6,
                              "labels": Array [],
                              "read": false,
                              "starred": true,
                              "subject": "We need to back up the wireless GB driver!",
                            }
          }
          onDeselectMessage={[Function]}
          onMarkAsReadMessage={[Function]}
          onSelectMessage={[Function]}
          onStarMessage={[Function]}
          onUnstarMessage={[Function]}
          selected={false}
/>,
        <MessageComponent
          checkItem={[Function]}
          message={
                    Object {
                              "id": 7,
                              "labels": Array [
                                "dev",
                                "personal",
                              ],
                              "read": false,
                              "starred": false,
                              "subject": "We need to index the mobile PCI bus!",
                            }
          }
          onDeselectMessage={[Function]}
          onMarkAsReadMessage={[Function]}
          onSelectMessage={[Function]}
          onStarMessage={[Function]}
          onUnstarMessage={[Function]}
          selected={false}
/>,
        <MessageComponent
          checkItem={[Function]}
          message={
                    Object {
                              "id": 8,
                              "labels": Array [],
                              "read": false,
                              "starred": true,
                              "subject": "If we connect the sensor, we can get to the HDD port through the redundant IB firewall!",
                            }
          }
          onDeselectMessage={[Function]}
          onMarkAsReadMessage={[Function]}
          onSelectMessage={[Function]}
          onStarMessage={[Function]}
          onUnstarMessage={[Function]}
          selected={false}
/>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": "1",
        "nodeType": "function",
        "props": Object {
          "checkItem": [Function],
          "message": Object {
            "id": 1,
            "labels": Array [
              "dev",
              "personal",
            ],
            "read": false,
            "starred": false,
            "subject": "You can't input the protocol without calculating the mobile RSS protocol!",
          },
          "onDeselectMessage": [Function],
          "onMarkAsReadMessage": [Function],
          "onSelectMessage": [Function],
          "onStarMessage": [Function],
          "onUnstarMessage": [Function],
          "selected": true,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "2",
        "nodeType": "function",
        "props": Object {
          "checkItem": [Function],
          "message": Object {
            "id": 2,
            "labels": Array [],
            "read": false,
            "starred": false,
            "subject": "connecting the system won't do anything, we need to input the mobile AI panel!",
          },
          "onDeselectMessage": [Function],
          "onMarkAsReadMessage": [Function],
          "onSelectMessage": [Function],
          "onStarMessage": [Function],
          "onUnstarMessage": [Function],
          "selected": false,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "3",
        "nodeType": "function",
        "props": Object {
          "checkItem": [Function],
          "message": Object {
            "id": 3,
            "labels": Array [
              "dev",
            ],
            "read": false,
            "starred": true,
            "subject": "Use the 1080p HTTP feed, then you can parse the cross-platform hard drive!",
          },
          "onDeselectMessage": [Function],
          "onMarkAsReadMessage": [Function],
          "onSelectMessage": [Function],
          "onStarMessage": [Function],
          "onUnstarMessage": [Function],
          "selected": false,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "4",
        "nodeType": "function",
        "props": Object {
          "checkItem": [Function],
          "message": Object {
            "id": 4,
            "labels": Array [],
            "read": false,
            "selected": true,
            "starred": false,
            "subject": "We need to program the primary TCP hard drive!",
          },
          "onDeselectMessage": [Function],
          "onMarkAsReadMessage": [Function],
          "onSelectMessage": [Function],
          "onStarMessage": [Function],
          "onUnstarMessage": [Function],
          "selected": false,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "5",
        "nodeType": "function",
        "props": Object {
          "checkItem": [Function],
          "message": Object {
            "id": 5,
            "labels": Array [
              "personal",
            ],
            "read": false,
            "starred": false,
            "subject": "If we override the interface, we can get to the HTTP feed through the virtual EXE interface!",
          },
          "onDeselectMessage": [Function],
          "onMarkAsReadMessage": [Function],
          "onSelectMessage": [Function],
          "onStarMessage": [Function],
          "onUnstarMessage": [Function],
          "selected": false,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "6",
        "nodeType": "function",
        "props": Object {
          "checkItem": [Function],
          "message": Object {
            "id": 6,
            "labels": Array [],
            "read": false,
            "starred": true,
            "subject": "We need to back up the wireless GB driver!",
          },
          "onDeselectMessage": [Function],
          "onMarkAsReadMessage": [Function],
          "onSelectMessage": [Function],
          "onStarMessage": [Function],
          "onUnstarMessage": [Function],
          "selected": false,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "7",
        "nodeType": "function",
        "props": Object {
          "checkItem": [Function],
          "message": Object {
            "id": 7,
            "labels": Array [
              "dev",
              "personal",
            ],
            "read": false,
            "starred": false,
            "subject": "We need to index the mobile PCI bus!",
          },
          "onDeselectMessage": [Function],
          "onMarkAsReadMessage": [Function],
          "onSelectMessage": [Function],
          "onStarMessage": [Function],
          "onUnstarMessage": [Function],
          "selected": false,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "8",
        "nodeType": "function",
        "props": Object {
          "checkItem": [Function],
          "message": Object {
            "id": 8,
            "labels": Array [],
            "read": false,
            "starred": true,
            "subject": "If we connect the sensor, we can get to the HDD port through the redundant IB firewall!",
          },
          "onDeselectMessage": [Function],
          "onMarkAsReadMessage": [Function],
          "onSelectMessage": [Function],
          "onStarMessage": [Function],
          "onUnstarMessage": [Function],
          "selected": false,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": null,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <MessageComponent
            checkItem={[Function]}
            message={
                        Object {
                                    "id": 1,
                                    "labels": Array [
                                      "dev",
                                      "personal",
                                    ],
                                    "read": false,
                                    "starred": false,
                                    "subject": "You can't input the protocol without calculating the mobile RSS protocol!",
                                  }
            }
            onDeselectMessage={[Function]}
            onMarkAsReadMessage={[Function]}
            onSelectMessage={[Function]}
            onStarMessage={[Function]}
            onUnstarMessage={[Function]}
            selected={true}
/>,
          <MessageComponent
            checkItem={[Function]}
            message={
                        Object {
                                    "id": 2,
                                    "labels": Array [],
                                    "read": false,
                                    "starred": false,
                                    "subject": "connecting the system won't do anything, we need to input the mobile AI panel!",
                                  }
            }
            onDeselectMessage={[Function]}
            onMarkAsReadMessage={[Function]}
            onSelectMessage={[Function]}
            onStarMessage={[Function]}
            onUnstarMessage={[Function]}
            selected={false}
/>,
          <MessageComponent
            checkItem={[Function]}
            message={
                        Object {
                                    "id": 3,
                                    "labels": Array [
                                      "dev",
                                    ],
                                    "read": false,
                                    "starred": true,
                                    "subject": "Use the 1080p HTTP feed, then you can parse the cross-platform hard drive!",
                                  }
            }
            onDeselectMessage={[Function]}
            onMarkAsReadMessage={[Function]}
            onSelectMessage={[Function]}
            onStarMessage={[Function]}
            onUnstarMessage={[Function]}
            selected={false}
/>,
          <MessageComponent
            checkItem={[Function]}
            message={
                        Object {
                                    "id": 4,
                                    "labels": Array [],
                                    "read": false,
                                    "selected": true,
                                    "starred": false,
                                    "subject": "We need to program the primary TCP hard drive!",
                                  }
            }
            onDeselectMessage={[Function]}
            onMarkAsReadMessage={[Function]}
            onSelectMessage={[Function]}
            onStarMessage={[Function]}
            onUnstarMessage={[Function]}
            selected={false}
/>,
          <MessageComponent
            checkItem={[Function]}
            message={
                        Object {
                                    "id": 5,
                                    "labels": Array [
                                      "personal",
                                    ],
                                    "read": false,
                                    "starred": false,
                                    "subject": "If we override the interface, we can get to the HTTP feed through the virtual EXE interface!",
                                  }
            }
            onDeselectMessage={[Function]}
            onMarkAsReadMessage={[Function]}
            onSelectMessage={[Function]}
            onStarMessage={[Function]}
            onUnstarMessage={[Function]}
            selected={false}
/>,
          <MessageComponent
            checkItem={[Function]}
            message={
                        Object {
                                    "id": 6,
                                    "labels": Array [],
                                    "read": false,
                                    "starred": true,
                                    "subject": "We need to back up the wireless GB driver!",
                                  }
            }
            onDeselectMessage={[Function]}
            onMarkAsReadMessage={[Function]}
            onSelectMessage={[Function]}
            onStarMessage={[Function]}
            onUnstarMessage={[Function]}
            selected={false}
/>,
          <MessageComponent
            checkItem={[Function]}
            message={
                        Object {
                                    "id": 7,
                                    "labels": Array [
                                      "dev",
                                      "personal",
                                    ],
                                    "read": false,
                                    "starred": false,
                                    "subject": "We need to index the mobile PCI bus!",
                                  }
            }
            onDeselectMessage={[Function]}
            onMarkAsReadMessage={[Function]}
            onSelectMessage={[Function]}
            onStarMessage={[Function]}
            onUnstarMessage={[Function]}
            selected={false}
/>,
          <MessageComponent
            checkItem={[Function]}
            message={
                        Object {
                                    "id": 8,
                                    "labels": Array [],
                                    "read": false,
                                    "starred": true,
                                    "subject": "If we connect the sensor, we can get to the HDD port through the redundant IB firewall!",
                                  }
            }
            onDeselectMessage={[Function]}
            onMarkAsReadMessage={[Function]}
            onSelectMessage={[Function]}
            onStarMessage={[Function]}
            onUnstarMessage={[Function]}
            selected={false}
/>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": "1",
          "nodeType": "function",
          "props": Object {
            "checkItem": [Function],
            "message": Object {
              "id": 1,
              "labels": Array [
                "dev",
                "personal",
              ],
              "read": false,
              "starred": false,
              "subject": "You can't input the protocol without calculating the mobile RSS protocol!",
            },
            "onDeselectMessage": [Function],
            "onMarkAsReadMessage": [Function],
            "onSelectMessage": [Function],
            "onStarMessage": [Function],
            "onUnstarMessage": [Function],
            "selected": true,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "2",
          "nodeType": "function",
          "props": Object {
            "checkItem": [Function],
            "message": Object {
              "id": 2,
              "labels": Array [],
              "read": false,
              "starred": false,
              "subject": "connecting the system won't do anything, we need to input the mobile AI panel!",
            },
            "onDeselectMessage": [Function],
            "onMarkAsReadMessage": [Function],
            "onSelectMessage": [Function],
            "onStarMessage": [Function],
            "onUnstarMessage": [Function],
            "selected": false,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "3",
          "nodeType": "function",
          "props": Object {
            "checkItem": [Function],
            "message": Object {
              "id": 3,
              "labels": Array [
                "dev",
              ],
              "read": false,
              "starred": true,
              "subject": "Use the 1080p HTTP feed, then you can parse the cross-platform hard drive!",
            },
            "onDeselectMessage": [Function],
            "onMarkAsReadMessage": [Function],
            "onSelectMessage": [Function],
            "onStarMessage": [Function],
            "onUnstarMessage": [Function],
            "selected": false,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "4",
          "nodeType": "function",
          "props": Object {
            "checkItem": [Function],
            "message": Object {
              "id": 4,
              "labels": Array [],
              "read": false,
              "selected": true,
              "starred": false,
              "subject": "We need to program the primary TCP hard drive!",
            },
            "onDeselectMessage": [Function],
            "onMarkAsReadMessage": [Function],
            "onSelectMessage": [Function],
            "onStarMessage": [Function],
            "onUnstarMessage": [Function],
            "selected": false,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "5",
          "nodeType": "function",
          "props": Object {
            "checkItem": [Function],
            "message": Object {
              "id": 5,
              "labels": Array [
                "personal",
              ],
              "read": false,
              "starred": false,
              "subject": "If we override the interface, we can get to the HTTP feed through the virtual EXE interface!",
            },
            "onDeselectMessage": [Function],
            "onMarkAsReadMessage": [Function],
            "onSelectMessage": [Function],
            "onStarMessage": [Function],
            "onUnstarMessage": [Function],
            "selected": false,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "6",
          "nodeType": "function",
          "props": Object {
            "checkItem": [Function],
            "message": Object {
              "id": 6,
              "labels": Array [],
              "read": false,
              "starred": true,
              "subject": "We need to back up the wireless GB driver!",
            },
            "onDeselectMessage": [Function],
            "onMarkAsReadMessage": [Function],
            "onSelectMessage": [Function],
            "onStarMessage": [Function],
            "onUnstarMessage": [Function],
            "selected": false,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "7",
          "nodeType": "function",
          "props": Object {
            "checkItem": [Function],
            "message": Object {
              "id": 7,
              "labels": Array [
                "dev",
                "personal",
              ],
              "read": false,
              "starred": false,
              "subject": "We need to index the mobile PCI bus!",
            },
            "onDeselectMessage": [Function],
            "onMarkAsReadMessage": [Function],
            "onSelectMessage": [Function],
            "onStarMessage": [Function],
            "onUnstarMessage": [Function],
            "selected": false,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "8",
          "nodeType": "function",
          "props": Object {
            "checkItem": [Function],
            "message": Object {
              "id": 8,
              "labels": Array [],
              "read": false,
              "starred": true,
              "subject": "If we connect the sensor, we can get to the HDD port through the redundant IB firewall!",
            },
            "onDeselectMessage": [Function],
            "onMarkAsReadMessage": [Function],
            "onSelectMessage": [Function],
            "onStarMessage": [Function],
            "onUnstarMessage": [Function],
            "selected": false,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactFifteenAdapter {
      "options": Object {
        "supportPrevContextArgumentOfComponentDidUpdate": true,
      },
    },
  },
}
`;
